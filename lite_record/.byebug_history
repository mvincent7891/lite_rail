c
@klass
exit
self
c
source_options.model_class
source_name
esults = DBConnection.execute(sql_string, id)
id
c
results = DBConnection.execute(sql_string, id.to_sym)
id
c
self.class.assoc_options[through_name].foreign_key
self.class.assoc_options[:through_name].foreign_key
self.class.assoc_options
self.send(self.class.assoc_options.foreign_key)
self.class.assoc_options
self
source_options
through_name
name
through_options.model_class.send(source_options.primary_key)
 source_options.model_class.send(source_options.primary_key)
source_options
through_options
self.owner_id
self.id
self
through_options
puts sql_string
sql_string
c
source_name
through_name
name
source_options
through_options
c
self.class.assoc_options[through_name]
self.assoc_options[through_name]
self
c
options.foreign_key
c
options.foreign_key
c
options.foreign_key
c
cc
c
self
self.class
c
optionsc
options
options[:foreign_key]
options[foreign_key]
options[foreign_key:]
options[:foreign_key]
options[foreign_key]
options
s
options
c
cc
c
options
c
p_key
options.model_class
name
self
options
p_key
c
params.values
sql_string
c
cc
c
options
s
options
c
options
self
c
name
options
name
self
self.id
Cat.id
options_object
self
c
self.new(DBConnection.execute(sql_string, *params.values)[0])
c
DBConnection.execute(sql_string, *params.val
c
tablc
table_name
c
where_line
c
*[0,1]
*a
a
*a
a
a = [attribute_values[1..-1] + [attributes[:id]]]
attribute_values[1..-1] + [attributes[:id]]
attribute_values[1..-1] + attributes[:id]
attribute_values[1..-1]
[attribute_values[1..-1]
*[attribute_values[1..-1]
*[attribute_values[1..-1] + [attributes[:id]]]
c
sql_string
c
sql_string
c
attributes[:id]
self.attributes[:id]
self.attribute_values
sql_string
c
self.attributes
sql_string
c
sql_string
c
set_line
c
self.attributes
self.attributes[:id] = @id
self.attributes
self.attributes[id] = @id
self.attributes
id
@id
c
@id
c
self.table_name
self.class.id
self.id
id
@id
c
cc
c
n
self.id
DBConnection.last_insert_row_id
c
self.class.table_namc
self.class.table_name
table_name
sql_string
c
self.class.columns.map { |val| self.send(val) }
self.class.columns.map(&:send()))
self.class.columns.map(&:send)
c
("?"*(cols.length)).split('').join(', ')
c
"?"*(cols.length).split('').join(', ')
col_names
c
col_names = self.class.columns.map(&:to_s).join(', ')
col_names = columns.map(&:to_s).join(', ')
c
self.class.columns
@columns
self.columns
columns
col_names = columns.map(&:to_s).join(', ')
c
col_names = @columns.map(&:to_s).join(', ')
c
col_names = @columns.map(&:to_s).join(', ')
c
sql_string
c
results
c
quit
y
quit
exit
\q
c
results.map { |hash| self.new(hash) }
c
self
c
results
c
n
sql_string
c
self.methods
value
attr_name
c
self.class.columns
self
self.columns
self.methods
self.class
c
self.columns
self
columns
c
@table_name
c
self.x
ivar
c
attributes[name]
"@#{name.to_s}"
self
