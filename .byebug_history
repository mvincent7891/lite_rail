c
q
c
exit
c
route_params
c
route_params
params
params.names
route_params
c
params
c
params
c
@req.params
params
c
@req.params
params
c
@req.params
params
c
@req.params
params
c
paramsc
c
controller
n
route_params
params
exit
exot
params[params.names[0]]
params.id
params.names
params
c
params
c
@pattern
params
c
params
c
params
c
DummyController.new
@controller_class
@controller_class.send(:new)
c
@action_name
@controller_class.class
eval("#{@controller_class}.new")
@controller_class.new
@controller_class
params
c
req.path
res.params
req.params
req.param
req
c
req.request_method.downcase
@http_method
req.request_method
req.request.method
req.methods
req.env
req.http_method
@http_method
req.method
puts "hi" if req.path.match(@pattern) 
if req.path.match(@pattern) 
req.path.match(@pattern) ?
req.path.match(@pattern)
@req.path.match(@pattern)
req.path
req.pattern
@pattern
req
c
JSON.parse(req.cookies["_rails_lite_app"])
req.cookies["_rails_lite_app"]
req.cookies["_rails_lit_app"]
req.cookies("_rails_lit_app")
req.cookies
JSON.parse("#{req.cookies}")
req.cookies
req
JSON.parse(req)
JSON.parse(req.cookies.to_s)
req.cookies.to_json
JSON.parse(req.cookies)
JSON(req.cookies)
json(req.cookies)
json: req.cookies
req.cookies
req
exit
ERB.new(File.read(template_path))
File.read(template_path)
template_path
exit
snake_class = camel_class.split(/(?=[A-Z])/).map(&:downcase).join('_')
exit
snake_array = camel_class.split /(?=[A-Z])/
camel_class
exit
snake_array = camel_class.split /(?=[A-Z])/
exit
/.*[^Controller]/.match(self.class.to_s)
exit
/.*[^Controller]/.match(self.class)
c
controller_class
c
self.class
self
c
@res.content_type
@res.methods.pretty
@res.methods
@res
